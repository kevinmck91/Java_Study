********* HashMaps in Java *************

A Map is an interface

A Map (unlike a Set) is a collection of key/value pairs stored in a certain fashion
A List can be seen as a type of map where the list index is the key.

Maps are ideal when counting occurrences. Sets are ideal when checking occurrences
Maps are superior because a Map can be seen as a set with extra functionality (counting the elements)
A map can be used as a set if needs be, but not the other way around.

3 types of Maps can be extended from the Map interface 

1. HashMap
2. LinkedHashMap
3. TreeMap

HashMap 		: Order is not preserved and is random 
LinkedHashMap	: Ordered version of the HashSet (ordered by insertion)
TreeMap			: Ordered version of the HashSet (Ordered by default)

Due to the way the data is stored in the set, the way data is retrieved is different 



********* Open addressing *************

Open addressing, or closed hashing, is a method of collision resolution in hash tables. With this method a hash collision is resolved by probing, or searching through alternate locations in the table

1. Linear probing

	In which the interval between probes is fixed — often set to 1.
	Linear probing has the best cache performance but is most sensitive to clustering
	
2. Quadratic probing 

	In which the interval between probes increases quadratically (hence, the indices are described by a quadratic function).
	quadratic probing falls in-between in both areas in terms of clustering and cache performance

3. Double hashing

	In which the interval between probes is fixed for each record but is computed by another hash function.
	Double hashing has poor cache performance but exhibits virtually no clustering
	Double hashing can also require more computation than other forms of probing.
	
Some open addressing methods, such as Hopscotch hashing, Robin Hood hashing, last-come-first-served hashing and cuckoo hashing move existing keys around in the array to make room for the new key. 
This gives better maximum search times than the methods based on probing.



********* Load Factor *************

A critical influence on performance of an open addressing hash table is the load factor; that is, the proportion of the slots in the array that are used.
As the load factor increases towards 100%, the number of probes that may be required to find or insert a given key rises dramatically. Once the table becomes full, probing algorithms may even fail to terminate.


If load factor exceeds 0.7 threshold, table's speed drastically degrades. Indeed, length of probe sequence is proportional to (loadFactor) / (1 - loadFactor) value.
When loadFactor approaches 1, length of the sequence approaches infinity. In practice it means, that there are no more free slots in the table and algorithm will never find place to insert a new element. 
Hence, this kind of hash tables should support dynamic resizing in order to be efficient.



********* Chaining *************

In the method known as separate chaining, each bucket is independent, and has some sort of list of entries with the same index.



********* How does a HashMap work in JAVA *************

Link to WebPage :  http://coding-geek.com/how-does-a-hashmap-work-in-java/#JAVA_8_improvements

HashMaps use an inner class  to store data: the Entry<K, V>. This entry is a simple key-value pair with two extra data:
	-	a reference to another Entry so that a HashMap can store entries like singly linked lists.
	-	a hash value that represents the hash value of the key. This hash value is stored to avoid the computation of the hash every time the HashMap needs it.
	
A HashMap stores data into multiple singly linked lists of entries.
All the lists are registered in an array of Entry (Entry<K,V>[] array).
The default capacity of this inner array is 16.

1.	When putting a value in a hash map HashMap.put(2, "abc"), the key is hashed twice (to prevent against a bad hashing function)
2.	It takes the rehashed hash hashcode and bit-masks it with the length (minus 1) of the internal array. This operation assures that the index can’t be greater than the size of the array (default 16).
3.	The value is then inserted into the linked list at the array index retrieved from the hashing
4.	The value of the key is used to identify the position of the value within the linked list

In order to work efficiently, the size of the inner array needs to be a power of 2. The HashMap has the ability to increase its inner array in order to keep very short linked lists.

When you create a HashMap, you can specify an initial size and a loadFactor with the following constructor:
public HashMap(int initialCapacity, float loadFactor)

If you don’t specify arguments, the default initialCapacity is 16 and the default loadFactor is 0.75. The initialCapacity represents to the size of the inner array of linked lists.
If you need to store a lot of data, you should create your HashMap with an initial capacity close to your expected volume.
At low volume the full recreation of the inner array is fast but at high volume it can takes seconds to minutes to rezise the array. 
By initially setting your expected size, you can avoid these costly operations.

HashMaps are not threadsafe, Because during the auto-resizing mechanism, if a thread tries to put or get an object, the map might use the old index value and won’t find the new bucket in which the entry is.
The HashTable implementation is a thread safe implementation that prevents from this situation. 

If you choose to create your own Key class and don’t make it immutable, you might lose data inside the HashMap.





********* Performance issues & Order *************

A particular feature of a HashMap is that unlike, say, balanced trees, its behavior is probabilistic

In the best case scenario, the get() and put() methods have a O(1) cost in time complexity.
If the hash function of your key is ill-designed, you’ll have a skew repartition (no matter how big the capacity of the inner array is).
In the worst case scenario (if most of the data are in the same buckets), you could end up with a O(n) time complexity.

JAVA 8 makes use of Binary Trees in the HashMap implementation (for certain sizes) which can be reduced to O(Log(n))

